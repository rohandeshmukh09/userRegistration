{
  "stats": {
    "suites": 8,
    "tests": 40,
    "passes": 40,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-30T21:14:18.698Z",
    "end": "2023-01-30T21:15:29.750Z",
    "duration": 30687,
    "testsRegistered": 40,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dba0dde1-214b-43c6-b7f3-b7ede4800ad9",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST02_registration_before.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST02_registration_before.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7a8c1d31-6ebd-4774-be59-0f749e8acb93",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register the user",
              "fullTitle": "User Registration Register the user",
              "timedOut": null,
              "duration": 826,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/registration',\n  //form: true,\n  body: {\n    \"name\": \"Developer\",\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"The email address you have entered is already registered\");\n});",
              "err": {},
              "uuid": "d89da0a4-7441-4b24-9e27-04ddb3949663",
              "parentUUID": "7a8c1d31-6ebd-4774-be59-0f749e8acb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID1",
              "fullTitle": "User Registration Get the user with ID1",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id1 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id1);\n});",
              "err": {},
              "uuid": "2033c200-b145-4d2d-b034-79269c0afbc8",
              "parentUUID": "7a8c1d31-6ebd-4774-be59-0f749e8acb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID2",
              "fullTitle": "User Registration Get the user with ID2",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id2 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id2);\n});",
              "err": {},
              "uuid": "1a745576-3baa-40b4-aa44-766c787eae92",
              "parentUUID": "7a8c1d31-6ebd-4774-be59-0f749e8acb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID3",
              "fullTitle": "User Registration Get the user with ID3",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id3 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id3);\n});",
              "err": {},
              "uuid": "34e88f76-4405-4e60-88db-3e2a91779a87",
              "parentUUID": "7a8c1d31-6ebd-4774-be59-0f749e8acb93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d89da0a4-7441-4b24-9e27-04ddb3949663",
            "2033c200-b145-4d2d-b034-79269c0afbc8",
            "1a745576-3baa-40b4-aa44-766c787eae92",
            "34e88f76-4405-4e60-88db-3e2a91779a87"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1697,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aa820086-a0e6-44a7-a500-46ee414a7f81",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST03_registration_beforeEach.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST03_registration_beforeEach.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a21b82c8-e765-420c-a34e-4f365c3342ec",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register the user",
              "fullTitle": "User Registration Register the user",
              "timedOut": null,
              "duration": 805,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/registration',\n  //form: true,\n  body: {\n    \"name\": \"Developer\",\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"The email address you have entered is already registered\");\n});",
              "err": {},
              "uuid": "2e7ca6be-de89-4c16-af0d-2397ec83b0b5",
              "parentUUID": "a21b82c8-e765-420c-a34e-4f365c3342ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID1",
              "fullTitle": "User Registration Get the user with ID1",
              "timedOut": null,
              "duration": 827,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id1 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id1);\n});",
              "err": {},
              "uuid": "7ba7e645-2442-4816-b8ab-3b0763365475",
              "parentUUID": "a21b82c8-e765-420c-a34e-4f365c3342ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID2",
              "fullTitle": "User Registration Get the user with ID2",
              "timedOut": null,
              "duration": 712,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id2 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id2);\n});",
              "err": {},
              "uuid": "7011a9f2-af92-47bd-8d01-1812ac436bff",
              "parentUUID": "a21b82c8-e765-420c-a34e-4f365c3342ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the user with ID3",
              "fullTitle": "User Registration Get the user with ID3",
              "timedOut": null,
              "duration": 820,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: '/users/' + id3 + '',\n  headers: {\n    \"Authorization\": \"bearer \" + access_token\n  }\n}).then(response => {\n  expect(response.status).eql(200);\n  cy.log(JSON.stringify(response));\n  expect(response.body.id).eq(id3);\n});",
              "err": {},
              "uuid": "70c5a93c-e88b-4021-83f1-4ca15d381a4c",
              "parentUUID": "a21b82c8-e765-420c-a34e-4f365c3342ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e7ca6be-de89-4c16-af0d-2397ec83b0b5",
            "7ba7e645-2442-4816-b8ab-3b0763365475",
            "7011a9f2-af92-47bd-8d01-1812ac436bff",
            "70c5a93c-e88b-4021-83f1-4ca15d381a4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3164,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "dfbc2ed2-4cc1-42ea-8974-68d98f71b911",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST04_ENV.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST04_ENV.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f2331c3-4154-410c-b0dc-aaa90fa47e68",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Generate token",
              "fullTitle": "User Registration Generate token",
              "timedOut": null,
              "duration": 1030,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n  cy.writeFile('.env', response.body.data.Token);\n  cy.readFile('.env').then(text => {\n    const access_token = text;\n    cy.log(access_token);\n    cy.request({\n      method: \"GET\",\n      url: \"/users?page=1\",\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    });\n  }).then(response => {\n    expect(response.status).eql(200);\n  });\n});",
              "err": {},
              "uuid": "d864061e-ac9c-4932-9f3a-36c622698bb4",
              "parentUUID": "3f2331c3-4154-410c-b0dc-aaa90fa47e68",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d864061e-ac9c-4932-9f3a-36c622698bb4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1030,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "872233aa-bec1-470b-98dc-1d414243bb63",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST04_ENVCHAIN.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST04_ENVCHAIN.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "68362baf-0add-4c40-b4ee-ab8513dc0ca7",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Generate token",
              "fullTitle": "User Registration Generate token",
              "timedOut": null,
              "duration": 338,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const username = Cypress.env('username');\nconst password = Cypress.env('password');\ncy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": username,\n    \"password\": password\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n  cy.writeFile('.env', response.body.data.Token);\n});",
              "err": {},
              "uuid": "9d99ad98-a693-463b-a1f3-be4f02bf3783",
              "parentUUID": "68362baf-0add-4c40-b4ee-ab8513dc0ca7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET ALL USER Page1",
              "fullTitle": "User Registration GET ALL USER Page1",
              "timedOut": null,
              "duration": 2489,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: \"GET\",\n    url: \"/users?page=1\",\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    //cy.log(response.body.data);\n    const data = response.body.data;\n    return data;\n  }).then(data => {\n    for (let i = 0; i < data.length; i++) {\n      cy.request({\n        method: \"GET\",\n        url: '/users/' + data[i].id,\n        headers: {\n          \"Authorization\": \"bearer \" + access_token\n        }\n      }).then(response => {\n        expect(response.status).eql(200);\n        expect(response.body).to.have.property('id', data[i].id);\n      });\n    }\n    ;\n  });\n});",
              "err": {},
              "uuid": "122a23d5-1025-4445-991c-48582c0448fc",
              "parentUUID": "68362baf-0add-4c40-b4ee-ab8513dc0ca7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET ALL USER Page2",
              "fullTitle": "User Registration GET ALL USER Page2",
              "timedOut": null,
              "duration": 2606,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: \"GET\",\n    url: \"/users?page=2\",\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    //cy.log(response.body.data);\n    const data = response.body.data;\n    return data;\n  }).then(data => {\n    for (let i = 0; i < data.length; i++) {\n      cy.request({\n        method: \"GET\",\n        url: '/users/' + data[i].id,\n        headers: {\n          \"Authorization\": \"bearer \" + access_token\n        }\n      }).then(response => {\n        expect(response.status).eql(200);\n        expect(response.body).to.have.property('id', data[i].id);\n      });\n    }\n    ;\n  });\n});",
              "err": {},
              "uuid": "23125563-3d6f-4e9d-b860-d81355df8f6c",
              "parentUUID": "68362baf-0add-4c40-b4ee-ab8513dc0ca7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET ALL USER Each Page1",
              "fullTitle": "User Registration GET ALL USER Each Page1",
              "timedOut": null,
              "duration": 2685,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: \"GET\",\n    url: \"/users?page=1\",\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    //cy.log(response.body.data);\n    const data = response.body.data;\n    return data;\n  }).then(data => {\n    cy.wrap(data).each((data, k) => {\n      for (k = 0; k < 1; k++) {\n        cy.request({\n          method: 'GET',\n          url: `http://restapi.adequateshop.com/api/users/${data.id}`,\n          headers: {\n            \"Authorization\": \"bearer \" + access_token\n          }\n        }).then(response => {\n          expect(response.status).to.eq(200);\n          //cy.wrap(response.body.usuarios.length).as('length');\n          //const leng = response.body.usuarios.length;\n          //cy.log(leng)\n          //expect(response.body.quantidade).to.eq(leng);\n          expect(response.body).to.have.property('id', data.id);\n          expect(response.body).has.property('name', data.name);\n          expect(response.body).to.have.property('email', data.email);\n          expect(response.body).to.have.property('profilepicture', data.profilepicture);\n          expect(response.body).to.have.property('location', data.location);\n          expect(response.body).to.have.property('createdat', data.createdat);\n        });\n      }\n      ;\n    });\n  });\n});",
              "err": {},
              "uuid": "a0d31371-f719-41d3-85b2-082ed785778b",
              "parentUUID": "68362baf-0add-4c40-b4ee-ab8513dc0ca7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d99ad98-a693-463b-a1f3-be4f02bf3783",
            "122a23d5-1025-4445-991c-48582c0448fc",
            "23125563-3d6f-4e9d-b860-d81355df8f6c",
            "a0d31371-f719-41d3-85b2-082ed785778b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "96a163f5-bddb-4cce-af49-f9e3af3dc7b3",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST05_FIXTURE_PAGE1_EACH_FOREACH.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST05_FIXTURE_PAGE1_EACH_FOREACH.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8977969d-8e54-41c1-89f8-4d317b50ee1d",
          "title": "User Registration LOGIN",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Generate token",
              "fullTitle": "User Registration LOGIN Generate token",
              "timedOut": null,
              "duration": 2140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n  cy.writeFile('.env', response.body.data.Token);\n  cy.readFile('.env').then(text => {\n    const access_token = text;\n    cy.log(access_token);\n    cy.request({\n      method: \"GET\",\n      url: \"/users?page=1\",\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    });\n  }).then(response => {\n    expect(response.status).eql(200);\n    cy.writeFile('cypress/fixtures/page1.json', response.body);\n    cy.log(JSON.stringify(response.body));\n    cy.wrap(response.body.length).as('length');\n    const leng = response.body.length;\n    cy.log(leng);\n    expect(response.body.per_page).to.eq(response.body.data.length);\n  });\n  cy.fixture('page1').then(data => {\n    cy.wrap(data.data.length).as('length');\n    const leng = data.data.length;\n    cy.log(leng);\n    expect(data.data.length).to.eq(leng);\n    expect(data.data[0].name).to.exist;\n    Cypress._.each(data.data, userdata => {\n      expect(userdata.id).to.not.be.null;\n      expect(userdata.name).to.not.be.null;\n      expect(userdata.email).to.not.be.null;\n      expect(userdata.profilepicture).to.not.be.null;\n      expect(userdata.location).to.not.be.null;\n      expect(userdata.createdat).to.not.be.null;\n      expect(userdata).to.have.all.keys('id', 'name', 'email', 'profilepicture', 'location', 'createdat');\n    });\n  });\n  cy.readFile('.env').then(text => {\n    const access_token = text;\n    cy.log(access_token);\n    cy.request({\n      method: \"GET\",\n      url: \"/users?page=2\",\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    });\n  }).then(response => {\n    expect(response.status).eql(200);\n    cy.writeFile('cypress/fixtures/page2.json', response.body);\n    cy.log(JSON.stringify(response.body));\n    cy.wrap(response.body.length).as('length');\n    const leng = response.body.length;\n    cy.log(leng);\n    expect(response.body.per_page).to.eq(response.body.data.length);\n  });\n  cy.fixture('page2').then(data => {\n    cy.wrap(data.data.length).as('length');\n    const leng = data.data.length;\n    cy.log(leng);\n    expect(data.data.length).to.eq(leng);\n    expect(data.data[0].name).to.exist;\n    Cypress._.each(data.data, userdata => {\n      expect(userdata.id).to.not.be.null;\n      expect(userdata.name).to.not.be.null;\n      expect(userdata.email).to.not.be.null;\n      expect(userdata.profilepicture).to.not.be.null;\n      expect(userdata.location).to.not.be.null;\n      expect(userdata.createdat).to.not.be.null;\n      expect(userdata).to.have.all.keys('id', 'name', 'email', 'profilepicture', 'location', 'createdat');\n    });\n  });\n});",
              "err": {},
              "uuid": "d46a9562-22f0-40a7-a33c-d0f512b786d7",
              "parentUUID": "8977969d-8e54-41c1-89f8-4d317b50ee1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d46a9562-22f0-40a7-a33c-d0f512b786d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8cb9880c-8894-44cc-a9df-4350f0048e4c",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST06_FIXTURE_EACH_FOREACH_PAGE1&2.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST06_FIXTURE_EACH_FOREACH_PAGE1&2.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d41e1094-802f-40a5-84b3-54a122fe013e",
          "title": "User Registration LOGIN",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET User Data By ID PAGE1",
              "fullTitle": "User Registration LOGIN GET User Data By ID PAGE1",
              "timedOut": null,
              "duration": 2435,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = __webpack_require__(/*! ../../fixtures/page1.json */ \"./cypress/fixtures/page1.json\");\ncy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.wrap(data.data).each((data, k) => {\n    for (k = 0; k < 1; k++) {\n      cy.request({\n        method: 'GET',\n        url: `/users/${data.id}`,\n        headers: {\n          \"Authorization\": \"bearer \" + access_token\n        }\n      }).then(response => {\n        expect(response.status).to.eq(200);\n        //cy.wrap(response.body.usuarios.length).as('length');\n        //const leng = response.body.usuarios.length;\n        //cy.log(leng)\n        //expect(response.body.quantidade).to.eq(leng);\n        expect(response.body).to.have.property('id', data.id);\n        expect(response.body).has.property('name', data.name);\n        expect(response.body).to.have.property('email', data.email);\n        expect(response.body).to.have.property('profilepicture', data.profilepicture);\n        expect(response.body).to.have.property('location', data.location);\n        expect(response.body).to.have.property('createdat', data.createdat);\n      });\n    }\n    ;\n  });\n});",
              "err": {},
              "uuid": "469fa089-cc3c-4b3b-8eda-2497cdac65a4",
              "parentUUID": "d41e1094-802f-40a5-84b3-54a122fe013e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET User Data By ID PAGE 2",
              "fullTitle": "User Registration LOGIN GET User Data By ID PAGE 2",
              "timedOut": null,
              "duration": 2539,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = __webpack_require__(/*! ../../fixtures/page2.json */ \"./cypress/fixtures/page2.json\");\ncy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.wrap(data.data).each((data, k) => {\n    for (k = 0; k < 1; k++) {\n      cy.request({\n        method: 'GET',\n        url: `/users/${data.id}`,\n        headers: {\n          \"Authorization\": \"bearer \" + access_token\n        }\n      }).then(response => {\n        expect(response.status).to.eq(200);\n        //cy.wrap(response.body.usuarios.length).as('length');\n        //const leng = response.body.usuarios.length;\n        //cy.log(leng)\n        //expect(response.body.quantidade).to.eq(leng);\n        expect(response.body).to.have.property('id', data.id);\n        expect(response.body).has.property('name', data.name);\n        expect(response.body).to.have.property('email', data.email);\n        expect(response.body).to.have.property('profilepicture', data.profilepicture);\n        expect(response.body).to.have.property('location', data.location);\n        expect(response.body).to.have.property('createdat', data.createdat);\n      });\n    }\n    ;\n  });\n});",
              "err": {},
              "uuid": "8f8a82f1-c552-461c-9f53-3215c371328f",
              "parentUUID": "d41e1094-802f-40a5-84b3-54a122fe013e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
              "title": "GET Users By ID forEach PAGE1",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Developer",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 Developer",
                  "timedOut": null,
                  "duration": 316,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "e7dc1546-8d19-490b-86af-99ab5b02c340",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AS",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 AS",
                  "timedOut": null,
                  "duration": 291,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "d966e6e3-ccb2-4b8a-8092-8570832ee239",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "vano",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 vano",
                  "timedOut": null,
                  "duration": 286,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "9f801c79-a03e-4682-9ed4-ec45a02f0767",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Developer123",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 Developer123",
                  "timedOut": null,
                  "duration": 281,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "646b6351-251c-430f-8d5e-84e66ac601ef",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Ashor",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 Ashor",
                  "timedOut": null,
                  "duration": 291,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "33868304-fa38-446a-87e7-1800f332f378",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "1234",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 1234",
                  "timedOut": null,
                  "duration": 323,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "36eb3d83-9a1e-4f4f-aa2d-688a8102aadc",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "asdasd",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 asdasd",
                  "timedOut": null,
                  "duration": 333,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "91d439c0-ccc1-42f3-993a-db79a07b2c90",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "da",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 da",
                  "timedOut": null,
                  "duration": 311,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "89aef052-9540-47cf-a582-92b00240af10",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "asdasd",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 asdasd",
                  "timedOut": null,
                  "duration": 353,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "760b6d0e-5689-4d89-ab67-9e0b3a729a15",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "karen",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE1 karen",
                  "timedOut": null,
                  "duration": 360,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "803658b6-64e2-431e-aaf5-3c4599cecf0d",
                  "parentUUID": "761cd098-7ec7-4141-aa60-e0f8f5373cba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7dc1546-8d19-490b-86af-99ab5b02c340",
                "d966e6e3-ccb2-4b8a-8092-8570832ee239",
                "9f801c79-a03e-4682-9ed4-ec45a02f0767",
                "646b6351-251c-430f-8d5e-84e66ac601ef",
                "33868304-fa38-446a-87e7-1800f332f378",
                "36eb3d83-9a1e-4f4f-aa2d-688a8102aadc",
                "91d439c0-ccc1-42f3-993a-db79a07b2c90",
                "89aef052-9540-47cf-a582-92b00240af10",
                "760b6d0e-5689-4d89-ab67-9e0b3a729a15",
                "803658b6-64e2-431e-aaf5-3c4599cecf0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3145,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
              "title": "GET Users By ID forEach PAGE2",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ASCAS",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 ASCAS",
                  "timedOut": null,
                  "duration": 353,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "04518eb7-0e38-4a0c-88ab-ba1feb95167d",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "jkhaumann",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 jkhaumann",
                  "timedOut": null,
                  "duration": 311,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "85040180-6d68-4208-b0c1-2182e35aa2d7",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 364,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "00774511-c86d-4183-8e2f-8b4dfdbff500",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "traveler",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 traveler",
                  "timedOut": null,
                  "duration": 336,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "44cde29d-9ed2-458e-b7fd-a46b17eea476",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 341,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "6c607185-6df3-4494-846c-c54951bfabb0",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mirza",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 mirza",
                  "timedOut": null,
                  "duration": 389,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "e68856ed-4b6b-4d30-9895-6aec7901223b",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 369,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "906401bc-2ebb-4acc-b0ab-ff15aae46e7b",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 384,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "93a3da7a-0c55-465e-bdab-abdcbc0c0cec",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 409,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "ee47637d-fc9e-4553-a359-d9e44c252622",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Albert Petoyan",
                  "fullTitle": "User Registration LOGIN GET Users By ID forEach PAGE2 Albert Petoyan",
                  "timedOut": null,
                  "duration": 383,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.readFile('.env').then(text => {\n  const access_token = text;\n  cy.log(access_token);\n  cy.request({\n    method: 'GET',\n    url: `/users/${dataobj.id}`,\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('id', dataobj.id);\n    expect(response.body).has.property('name', dataobj.name);\n    expect(response.body).to.have.property('email', dataobj.email);\n    expect(response.body).to.have.property('profilepicture', dataobj.profilepicture);\n    expect(response.body).to.have.property('location', dataobj.location);\n    expect(response.body).to.have.property('createdat', dataobj.createdat);\n  });\n});",
                  "err": {},
                  "uuid": "05429a2f-5156-4ade-88d0-4b5e9b05ad11",
                  "parentUUID": "30b67a4e-1316-4e3a-ade0-748ac95865d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04518eb7-0e38-4a0c-88ab-ba1feb95167d",
                "85040180-6d68-4208-b0c1-2182e35aa2d7",
                "00774511-c86d-4183-8e2f-8b4dfdbff500",
                "44cde29d-9ed2-458e-b7fd-a46b17eea476",
                "6c607185-6df3-4494-846c-c54951bfabb0",
                "e68856ed-4b6b-4d30-9895-6aec7901223b",
                "906401bc-2ebb-4acc-b0ab-ff15aae46e7b",
                "93a3da7a-0c55-465e-bdab-abdcbc0c0cec",
                "ee47637d-fc9e-4553-a359-d9e44c252622",
                "05429a2f-5156-4ade-88d0-4b5e9b05ad11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3639,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "469fa089-cc3c-4b3b-8eda-2497cdac65a4",
            "8f8a82f1-c552-461c-9f53-3215c371328f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4974,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3ac5603d-876e-4b79-a71e-d61eddb68b53",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST07.LOGINTEST.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST07.LOGINTEST.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b144854f-f076-44fb-bd97-332481e47bd1",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login Check Env json",
              "fullTitle": "User Registration Login Check Env json",
              "timedOut": null,
              "duration": 388,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//const username = Cypress.env('username')\n//const password = Cypress.env('password')\ncy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": `${data.env.username}`,\n    \"password\": `${data.env.password}`\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n});",
              "err": {},
              "uuid": "2d877f80-fb7f-4881-9fc9-f018a806dc98",
              "parentUUID": "b144854f-f076-44fb-bd97-332481e47bd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login Check Cypress Env",
              "fullTitle": "User Registration Login Check Cypress Env",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const username = Cypress.env('username');\nconst password = Cypress.env('password');\n//expect(username, 'username was set').to.be.a('string').and.not.be.empty\n// expect(password, 'password was set').to.be.a('string').and.not.be.empty\ncy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": username,\n    \"password\": password\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n});",
              "err": {},
              "uuid": "1029c1cd-205c-4065-a0b9-d2e376f84965",
              "parentUUID": "b144854f-f076-44fb-bd97-332481e47bd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d877f80-fb7f-4881-9fc9-f018a806dc98",
            "1029c1cd-205c-4065-a0b9-d2e376f84965"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 715,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c22173b7-916f-424f-a900-68bd1acfdafd",
      "title": "",
      "fullFile": "cypress\\e2e\\userRegistration\\TEST01_registration.cy.js",
      "file": "cypress\\e2e\\userRegistration\\TEST01_registration.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "368c967a-c19e-46a5-ae9b-d3211947614e",
          "title": "User Registration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register the user",
              "fullTitle": "User Registration Register the user",
              "timedOut": null,
              "duration": 753,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/registration',\n  //form: true,\n  body: {\n    \"name\": \"Developer\",\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"The email address you have entered is already registered\");\n});",
              "err": {},
              "uuid": "cb88a9d5-048a-4656-997d-a31836bd5705",
              "parentUUID": "368c967a-c19e-46a5-ae9b-d3211947614e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login the user",
              "fullTitle": "User Registration Login the user",
              "timedOut": null,
              "duration": 1312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/authaccount/login',\n  //form: true,\n  body: {\n    \"email\": \"DevOps55@gmail.com\",\n    \"password\": 123456\n  }\n}).then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.status).to.eq(200);\n  cy.log(response.body.message);\n  expect(response.body.message).eq(\"success\");\n  expect(response.body.data.Id).eq(207904);\n  expect(response.body.data.Name).eq(\"Developer\");\n  expect(response.body.data.Email).eq(\"DevOps55@gmail.com\");\n  cy.log(response.body.data.Token);\n  access_token = response.body.data.Token;\n  cy.request({\n    method: \"GET\",\n    url: \"/users?page=1\",\n    headers: {\n      \"Authorization\": \"bearer \" + access_token\n    }\n  }).then(response => {\n    expect(response.status).eql(200);\n    id1 = response.body.data[0].id;\n    id2 = response.body.data[1].id;\n    id3 = response.body.data[2].id;\n    cy.log(\"userid\", +id1);\n    cy.log(\"userid\", +id2);\n    cy.log(\"userid\", +id3);\n    cy.request({\n      method: \"GET\",\n      url: '/users/' + id1 + '',\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    }).then(response => {\n      expect(response.status).eql(200);\n      cy.log(JSON.stringify(response));\n      expect(response.body.id).eq(id1);\n    });\n    cy.request({\n      method: \"GET\",\n      url: '/users/' + id2 + '',\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    }).then(response => {\n      expect(response.status).eql(200);\n      cy.log(JSON.stringify(response));\n      expect(response.body.id).eq(id2);\n    });\n    cy.request({\n      method: \"GET\",\n      url: '/users/' + id3 + '',\n      headers: {\n        \"Authorization\": \"bearer \" + access_token\n      }\n    }).then(response => {\n      expect(response.status).eql(200);\n      cy.log(JSON.stringify(response));\n      expect(response.body.id).eq(id3);\n    });\n  });\n});",
              "err": {},
              "uuid": "986a20b6-7d1e-4a2b-9b69-5c3d4525b0ef",
              "parentUUID": "368c967a-c19e-46a5-ae9b-d3211947614e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb88a9d5-048a-4656-997d-a31836bd5705",
            "986a20b6-7d1e-4a2b-9b69-5c3d4525b0ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2065,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reporterDir": "mochawesome-report",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}